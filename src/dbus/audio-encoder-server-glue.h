
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__audio_encoder_server_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__audio_encoder_server_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace ipcam {
namespace Media {

class AudioEncoder_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    AudioEncoder_adaptor()
    : ::DBus::InterfaceAdaptor("ipcam.Media.AudioEncoder")
    {
        bind_property(Encoding, "u", true, false);
        bind_property(Bitrate, "u", true, true);
        bind_property(SampleRate, "u", true, true);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedMethod AudioEncoder_adaptor_methods[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod AudioEncoder_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty AudioEncoder_adaptor_properties[] = 
        {
            { "Encoding", "u", true, false },
            { "Bitrate", "u", true, true },
            { "SampleRate", "u", true, true },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface AudioEncoder_adaptor_interface = 
        {
            "ipcam.Media.AudioEncoder",
            AudioEncoder_adaptor_methods,
            AudioEncoder_adaptor_signals,
            AudioEncoder_adaptor_properties
        };
        return &AudioEncoder_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< uint32_t > Encoding;
    ::DBus::PropertyAdaptor< uint32_t > Bitrate;
    ::DBus::PropertyAdaptor< uint32_t > SampleRate;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
};

} } 
#endif //__dbusxx__audio_encoder_server_glue_h__ADAPTOR_MARSHAL_H
